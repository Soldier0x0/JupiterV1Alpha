#!/bin/bash
# Jupiter SIEM - Master Deployment Selector
# Unified deployment script for both Native and Docker approaches

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Logging functions
log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
error() { echo -e "${RED}[ERROR] $1${NC}"; exit 1; }
warning() { echo -e "${YELLOW}[WARNING] $1${NC}"; }
info() { echo -e "${BLUE}[INFO] $1${NC}"; }
header() { echo -e "${CYAN}$1${NC}"; }

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
NATIVE_DEPLOY="${SCRIPT_DIR}/native/deployment/deploy-native.sh"
DOCKER_DEPLOY="${SCRIPT_DIR}/docker/deployment/deploy-docker.sh"

# Display header
clear
header "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
header "‚ïë                    üöÄ Jupiter SIEM Deployment                        ‚ïë"
header "‚ïë                     Production-Ready Deployment                      ‚ïë"
header "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# Show deployment options
show_menu() {
    echo "Please select your deployment method:"
    echo ""
    echo "  üñ•Ô∏è  [1] Native Deployment"
    echo "      ‚îî‚îÄ‚îÄ Direct installation on server (systemd, nginx, redis)"
    echo "      ‚îî‚îÄ‚îÄ Better performance, traditional ops"
    echo "      ‚îî‚îÄ‚îÄ Recommended for: Single server, traditional environments"
    echo ""
    echo "  üê≥ [2] Docker Deployment"  
    echo "      ‚îî‚îÄ‚îÄ Containerized deployment (docker-compose)"
    echo "      ‚îî‚îÄ‚îÄ Better isolation, easier scaling"
    echo "      ‚îî‚îÄ‚îÄ Recommended for: Cloud, microservices, development"
    echo ""
    echo "  ‚öôÔ∏è  [3] Both Deployments (Different Ports)"
    echo "      ‚îî‚îÄ‚îÄ Run both native and docker simultaneously"
    echo "      ‚îî‚îÄ‚îÄ Native: http://localhost, Docker: http://localhost:8080"
    echo "      ‚îî‚îÄ‚îÄ Recommended for: Testing, migration scenarios"
    echo ""
    echo "  ‚ÑπÔ∏è  [4] Show Deployment Comparison"
    echo "      ‚îî‚îÄ‚îÄ Detailed comparison of native vs docker"
    echo ""
    echo "  ‚ùå [5] Exit"
    echo ""
}

# Show deployment comparison
show_comparison() {
    clear
    header "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    header "‚ïë                   üìä Deployment Method Comparison                    ‚ïë"
    header "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ     Aspect      ‚îÇ    Native Deployment   ‚îÇ   Docker Deployment    ‚îÇ"
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
    echo "‚îÇ Performance     ‚îÇ ‚ö° Excellent (direct)  ‚îÇ üî• Good (containers)   ‚îÇ"
    echo "‚îÇ Resource Usage  ‚îÇ üíö Lower overhead     ‚îÇ üü° Higher overhead     ‚îÇ"
    echo "‚îÇ Isolation       ‚îÇ üü° Process-level      ‚îÇ ‚≠ê Container-level     ‚îÇ"
    echo "‚îÇ Scaling         ‚îÇ üü° Manual scaling     ‚îÇ ‚≠ê Easy auto-scaling   ‚îÇ"
    echo "‚îÇ Maintenance     ‚îÇ üîß Traditional tools  ‚îÇ üê≥ Docker tools       ‚îÇ"
    echo "‚îÇ Debugging       ‚îÇ ‚≠ê Direct access      ‚îÇ üîç Container logs      ‚îÇ"
    echo "‚îÇ Rollbacks       ‚îÇ üü° Manual process     ‚îÇ ‚ö° Quick & easy       ‚îÇ"
    echo "‚îÇ Cloud Deploy    ‚îÇ üü° Requires setup     ‚îÇ ‚≠ê Cloud-native       ‚îÇ"
    echo "‚îÇ Complexity      ‚îÇ üü¢ Simple setup      ‚îÇ üü° Docker knowledge   ‚îÇ"
    echo "‚îÇ Backup/Restore  ‚îÇ üì¶ File-based        ‚îÇ üì¶ Volume-based       ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    
    echo "üéØ Choose Native if:"
    echo "   ‚Ä¢ You prefer traditional server management"
    echo "   ‚Ä¢ Maximum performance is critical"
    echo "   ‚Ä¢ You have a single server setup"
    echo "   ‚Ä¢ Your team is familiar with systemd/nginx"
    echo ""
    
    echo "üéØ Choose Docker if:"
    echo "   ‚Ä¢ You want containerized deployments"
    echo "   ‚Ä¢ You plan to scale horizontally"
    echo "   ‚Ä¢ You're deploying to cloud platforms"
    echo "   ‚Ä¢ You want easier development/testing"
    echo ""
    
    echo "Press any key to return to menu..."
    read -n 1
}

# Check system capabilities
check_system() {
    local native_ok=true
    local docker_ok=true
    
    # Check for native deployment requirements
    if ! command -v systemctl >/dev/null 2>&1; then
        native_ok=false
    fi
    if ! command -v nginx >/dev/null 2>&1; then
        native_ok=false
    fi
    
    # Check for docker deployment requirements
    if ! command -v docker >/dev/null 2>&1; then
        docker_ok=false
    fi
    if ! command -v docker-compose >/dev/null 2>&1; then
        docker_ok=false
    fi
    
    echo "System Capabilities:"
    if [[ "$native_ok" == true ]]; then
        echo "  ‚úÖ Native deployment - Ready"
    else
        echo "  ‚ùå Native deployment - Missing requirements (systemctl, nginx)"
    fi
    
    if [[ "$docker_ok" == true ]]; then
        echo "  ‚úÖ Docker deployment - Ready"
    else
        echo "  ‚ùå Docker deployment - Missing requirements (docker, docker-compose)"
    fi
    echo ""
}

# Deploy native
deploy_native() {
    header "üñ•Ô∏è Starting Native Deployment..."
    
    if [[ ! -f "$NATIVE_DEPLOY" ]]; then
        error "Native deployment script not found at $NATIVE_DEPLOY"
    fi
    
    if ! command -v systemctl >/dev/null 2>&1; then
        error "systemctl is required for native deployment"
    fi
    
    log "Executing native deployment script..."
    bash "$NATIVE_DEPLOY"
}

# Deploy docker
deploy_docker() {
    header "üê≥ Starting Docker Deployment..."
    
    if [[ ! -f "$DOCKER_DEPLOY" ]]; then
        error "Docker deployment script not found at $DOCKER_DEPLOY"
    fi
    
    if ! command -v docker >/dev/null 2>&1; then
        error "Docker is required for Docker deployment"
    fi
    
    log "Executing Docker deployment script..."
    bash "$DOCKER_DEPLOY"
}

# Deploy both
deploy_both() {
    header "‚öôÔ∏è Starting Both Deployments..."
    
    warning "This will run both native and Docker deployments on different ports"
    warning "Native: http://localhost (ports 80/443)"
    warning "Docker: http://localhost:8080 (ports 8080/8443)"
    echo ""
    
    read -p "Continue? [y/N]: " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "Deployment cancelled"
        return
    fi
    
    log "Phase 1: Native Deployment"
    deploy_native
    
    echo ""
    log "Phase 2: Docker Deployment"
    deploy_docker
    
    log ""
    log "üéâ Both deployments completed!"
    log "Native:  http://localhost"
    log "Docker:  http://localhost:8080"
}

# Main function
main() {
    while true; do
        show_menu
        check_system
        
        read -p "Enter your choice [1-5]: " -n 1 -r
        echo ""
        echo ""
        
        case $REPLY in
            1)
                deploy_native
                break
                ;;
            2)
                deploy_docker
                break
                ;;
            3)
                deploy_both
                break
                ;;
            4)
                show_comparison
                ;;
            5)
                log "Goodbye! üëã"
                exit 0
                ;;
            *)
                warning "Invalid option. Please select 1-5."
                echo ""
                ;;
        esac
    done
}

# Handle command line arguments
if [[ $# -gt 0 ]]; then
    case "${1}" in
        "native"|"-n"|"--native")
            deploy_native
            ;;
        "docker"|"-d"|"--docker")
            deploy_docker
            ;;
        "both"|"-b"|"--both")
            deploy_both
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [native|docker|both|help]"
            echo ""
            echo "Options:"
            echo "  native, -n, --native    Deploy using native method"
            echo "  docker, -d, --docker    Deploy using Docker method"  
            echo "  both, -b, --both        Deploy both methods"
            echo "  help, -h, --help        Show this help"
            echo ""
            echo "If no option is provided, interactive menu will be shown."
            exit 0
            ;;
        *)
            error "Unknown option: $1. Use 'help' for usage information."
            ;;
    esac
else
    main
fi